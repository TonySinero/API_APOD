// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	model "github.com/apod/internal/model"
	gomock "github.com/golang/mock/gomock"
)

// MockImage is a mock of Image interface.
type MockImage struct {
	ctrl     *gomock.Controller
	recorder *MockImageMockRecorder
}

// MockImageMockRecorder is the mock recorder for MockImage.
type MockImageMockRecorder struct {
	mock *MockImage
}

// NewMockImage creates a new mock instance.
func NewMockImage(ctrl *gomock.Controller) *MockImage {
	mock := &MockImage{ctrl: ctrl}
	mock.recorder = &MockImageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImage) EXPECT() *MockImageMockRecorder {
	return m.recorder
}

// CreateAlbum mocks base method.
func (m *MockImage) CreateAlbum(im *model.Nasa) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAlbum", im)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAlbum indicates an expected call of CreateAlbum.
func (mr *MockImageMockRecorder) CreateAlbum(im interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAlbum", reflect.TypeOf((*MockImage)(nil).CreateAlbum), im)
}

// GetAlbumFromDB mocks base method.
func (m *MockImage) GetAlbumFromDB() ([]model.Nasa, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlbumFromDB")
	ret0, _ := ret[0].([]model.Nasa)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlbumFromDB indicates an expected call of GetAlbumFromDB.
func (mr *MockImageMockRecorder) GetAlbumFromDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlbumFromDB", reflect.TypeOf((*MockImage)(nil).GetAlbumFromDB))
}
